import { load } from "cheerio";
import { assert } from "node:console";
import { writeFileSync } from "node:fs";
import path from "node:path";

interface Scrapped {
  structs: object;
  virtualMethods: object;
}

async function scrapeGodotRustDocs(): Promise<Scrapped> {
  const url =
    "https://godot-rust.github.io/docs/gdext/master/godot/classes/index.html";

  const html = await fetch(url);
  const $ = load(await html.text());

  const structs = {};
  const virtualMethods = {};

  $("#structs +dl.item-table dt").each((_i, a) => {
    const rust = $(a).text().trim();
    const godot = $(a).next().children().first().text().trim().replace(".", "");

    Object.assign(structs, { [godot as keyof object]: rust });
  });

  let inversed = {};
  Object.entries(structs).forEach(([k, v]) => {
    console.log(`${k} ${v}`);
    Object.assign(inversed, { [v as keyof object]: k });
  });

  $("#traits +dl.item-table dt").each((_i, a) => {
    const iclass = $(a).text().trim();
    const rclass = $(a)
      .next()
      .children()
      .first()
      .text()
      .trim()
      .replace(".", "");

    let godotValue = inversed[rclass as keyof object];

    Object.assign(virtualMethods, {
      [godotValue as keyof object]: iclass,
    });
  });

  const lenStructs = Object.keys(structs).length;
  const lenMets = Object.keys(virtualMethods).length;

  console.log(`Structs récupérés : ${lenStructs}`);
  console.log(`Virtual Methods récupérés : ${lenMets}`);
  assert(lenMets === lenStructs, "Le chiffre struct/virtual diffère");
  return { structs, virtualMethods };
}

async function main() {
  let { structs, virtualMethods } = await scrapeGodotRustDocs();
  let content = `
// autogenerated do no edit
export const GODOT_STRUCTS = ${JSON.stringify(structs)}; 
export const GODOT_VIRTUAL_METHODS = ${JSON.stringify(virtualMethods)}; 
`;
  let dest = path.resolve(__filename, "../../../src/godotClasses.ts");
  writeFileSync(dest, content);
}

main();
